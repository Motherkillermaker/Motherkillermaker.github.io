<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何快速搭建属于自己的专属博客~</title>
      <link href="/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke-xiang-xi-ban/"/>
      <url>/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke-xiang-xi-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>​        </p><p>​        自己搭建此博客花了大概三天时间，前前后后也踩了不少坑。建站后思索着本站的第一篇文章该写什么，最后还是决定写一篇如何搭建个人博客的文章来开启自己的博文写作之旅！</p><h1 id="二、博客环境搭建"><a href="#二、博客环境搭建" class="headerlink" title="二、博客环境搭建"></a>二、博客环境搭建</h1><p>​        </p><p>​        Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。话不多说，直接开始 !</p><h2 id="1-下载-Git-与Node-js"><a href="#1-下载-Git-与Node-js" class="headerlink" title="1.下载 Git 与Node.js"></a>1.下载 Git 与Node.js</h2><p>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><h3 id="1-1-Node-js-的安装与配置"><a href="#1-1-Node-js-的安装与配置" class="headerlink" title="1.1 Node.js 的安装与配置"></a>1.1 Node.js 的安装与配置</h3><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png" alt="Node.js下载以及版本的选择"></p><ul><li>下载好与电脑系统对应的安装程序后，开始安装流程：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png" alt="img"></p><ul><li>将”I accept the terms in the License Agreement” 前面的复选框勾选，同意安装协议，再点击 Next，进行下一步操作；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png" alt="img"></p><ul><li>选择 Node.js 安装程序的安装位置，在这里我以”C:\Program Files\nodejs” 为例（建议安装在C盘，本身软件也不大），点击 Next，进入下一步操作；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png" alt="img"></p><ul><li>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击 Next，进入下一步操作；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png" alt="img"></p><ul><li>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，点击 Next，进入下一步；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png" alt="img"></p><ul><li>点击”Install”，等待 Node.js 安装完成；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png" alt="img"></p><ul><li>当看到下图所显示的情况，Node.js 就成功安装完毕。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png" alt="img"></p><ul><li>验证安装，并测试 Node.js 是否加入环境变量，当出现如下图的情况，Node.js 安装大功告成。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png" alt="img"></p><p><strong>注意： 如果执行 node -v 报错的话，那么手动将 Node.js 的安装路径添加到环境变量中,具体步骤移步CSDN</strong>。</p><h3 id="1-2-Git-的安装与配置"><a href="#1-2-Git-的安装与配置" class="headerlink" title="1.2 Git 的安装与配置"></a>1.2 Git 的安装与配置</h3><ul><li><p>首先就是去 Git 官网下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><strong>点击Downloads    -&gt;    根据你的系统选择Mac os / Windows / Linux    -&gt;    开始下载</strong></p></li><li><p>接着无脑下一步，直到出现以下安装步骤：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png" alt="img"></p><p>安装Git 对环境变量 PATH 的影响，第一种影响较小，第三种会影响到 Windows 的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装；</p></li><li><p>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png" alt="img"></p></li><li><p>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png" alt="img"></p></li><li><p>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png" alt="img"></p></li><li><p>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png" alt="img"></p></li><li><p>安装完成</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png" alt="img"></p></li><li><p>回到桌面，点击鼠标右键，会出现两个选项 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>，在打开 Cmd (Win+R)，分别输入 <code>git</code> 和 <code>git --version</code>，如果出现如下图的情况，即安装成功！</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png" alt="img"></p></li></ul><h2 id="2-GitHub-账号的创建以及-Git-的配置"><a href="#2-GitHub-账号的创建以及-Git-的配置" class="headerlink" title="2. GitHub 账号的创建以及 Git 的配置"></a>2. GitHub 账号的创建以及 Git 的配置</h2><h3 id="2-1-GitHub-账号的创建"><a href="#2-1-GitHub-账号的创建" class="headerlink" title="2.1 GitHub 账号的创建"></a>2.1 GitHub 账号的创建</h3><p>​    GitHub 账号的创建比较简单，网上也有许多教程，此处便不再赘述</p><h3 id="2-2-Git-的配置"><a href="#2-2-Git-的配置" class="headerlink" title="2.2 Git 的配置"></a>2.2 Git 的配置</h3><ul><li><p><strong>配置Git 用户名和邮箱</strong></p><p>在桌面点击鼠标右键，点击 Git Bash Here，会出现一个界面如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117215118.png" alt="img"></p><p>然后分别输入下面的两个命令，并回车：</p><pre><code>git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"# 一般只要不报错，可以跳过下面寻找.gitconfig文件</code></pre></li></ul><p>​        然后找到<code>.gitconfig</code> 文件，文件存放位置在 <code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><p>​        <img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117220016.png" alt="img"></p><ul><li><p><strong>配置GitHub</strong> </p><p><strong>创建：</strong></p><ul><li><p>新建一个名为你的用户名.github.io的仓库</p></li><li><p>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 </p></li></ul><p><strong>注意：</strong></p><ul><li><p>注册的邮箱一定要验证，否则不会成功；</p></li><li><p>仓库名字必须是：username.github.io，其中username是你的用户名；</p></li><li><p>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；</p></li><li><p>创建页面如下：</p></li></ul><p><img src="https://i0.hdslb.com/bfs/article/ca3573693ec7d4b8f30b71b7f22a2003a9bac6e8.png@942w_675h_progressive.webp" alt="img"></p></li><li><p><strong>配置SSH 免密登录</strong></p><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 </p><p><strong>简单的来说就是给予你当前电脑访问你GitHub 仓库的权限 ~</strong></p><p><strong>操作步骤</strong></p></li></ul><ol><li><p>在 git bash here  中创建一个ssh密钥</p><p>​    指令：<code>cd ~/.ssh</code></p><p>如果本地有的话，它会自动进入到了ssh目录下；</p><p>​    若没有则创建：    <code>ssh-keygen -t rsa -C "邮箱"</code>   此处邮箱填写自己的邮箱</p><p>然后enter三连</p><p>生成两个文件： id_rsa      id_rsa.pub  存放在 C:\Users\admin.ssh    文件夹下</p><p><strong>注意：pub文件放置的，就是我们的公开的ssh码，也是给管理员这个ssh，让他来添加</strong></p></li><li><p>在GitHub 或者 Gitee 上添加 SSH key</p><p>Title：随意填写</p><p>Key：将本地的id_rsa.pub文件用记事本打开，复制全部内容粘贴到GitHub 仓库的SSH Keys 位置</p><p>如下图所示：</p><p><img src="https://i0.hdslb.com/bfs/article/cae65261511e4bf7e4ea0e7838a5bfc5f3560d20.png@942w_509h_progressive.webp" alt="img"></p></li></ol><p>  <strong>至此，你的全部环境均以搭建好，接下来让我们快速开始搭建博客吧 ~</strong></p><h1 id="三、本地安装-Hexo-博客框架并推送到-GitHub"><a href="#三、本地安装-Hexo-博客框架并推送到-GitHub" class="headerlink" title="三、本地安装 Hexo 博客框架并推送到 GitHub"></a>三、本地安装 Hexo 博客框架并推送到 GitHub</h1><h2 id="3-1-博客初始化"><a href="#3-1-博客初始化" class="headerlink" title="3.1 博客初始化"></a>3.1 博客初始化</h2><ol><li><p>命令行安装cnpm  （加速以后的插件下载，建议git bash here 处安装）</p><p>命令：<code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code> </p><p>安装后验证：<code>cnpm -v</code>  出现版本号说明安装成功</p></li><li><p>命令行安装hexo  （安装博客框架）</p><p>命令：<code>cnpm install -g hexo-cli</code></p><p>安装后验证：<code>hexo  -v</code>  出现版本号说明安装成功</p></li><li><p>在电脑的某个地方新建一个名为HexoData的文件夹（名字可以随便取），比如我的是D:\JAVA项目\HexoData</p><p>这个文件夹将来就作为你存放代码的地方，所以最好不要随便放 </p></li><li><p>在D:\JAVA项目\HexoData 文件夹下右键打开 Git Bash </p><p>并依次执行以下命令</p><p><code>hexo init</code>         初始化命令，hexo会自动下载一些文件到这个目录，包括node_modules等</p><p><code>hexo g</code>                生成命令   </p><p><code>hexo s</code>                启动服务</p><p><strong>说明：</strong><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，说明博客初始化以及成功！</p><p>很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，</p><p>因为4000这个端口太常见了， 只需要关闭4000端口并重新启动即可</p><p><strong>到此博客的初始化便完成了，此时你可以本地开启服务并访问，下一步便是推送到GitHub 上！</strong></p></li></ol><h2 id="3-2-将博客部署到-github-个人主页上"><a href="#3-2-将博客部署到-github-个人主页上" class="headerlink" title="3.2 将博客部署到 github 个人主页上"></a>3.2 将博客部署到 github 个人主页上</h2><ul><li><p>第一步：在D:\JAVA项目\HexoData目录下安装 hexo-deployer-git 插件 （git bash here 处安装）</p><p>命令：<code>npm install hexo-deployer-git --save</code>   </p><p>说明：必须安装，否则执行hexo d 的话会报错</p></li><li><p>第二步：编辑D:\JAVA项目\HexoData目录下的 _config.yml 文件, 在文件末尾修改配置文件：</p><pre><code>deploy:  type: git  repo: github上对应仓库的ssh 链接      //也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git              branch: main</code></pre><p><strong>说明：</strong>仓库的ssh链接如下</p><p><img src="https://i0.hdslb.com/bfs/article/9cc1855324f9f968aa56d8a94a913475b3bc1d70.png@942w_437h_progressive.webp" alt="img"></p><p><strong>切记：分支branch切记修改为 main，之前github的默认主分支为master，现已经改为main</strong> ！！！</p></li><li><p>第三步：在D:\JAVA项目\HexoData目录下, 将本地 blog 推送到 github仓库</p><p>输入命令：<code>hexo d</code></p><p>也可能需要输入 username &amp; pwd</p><p>推送成功后, 在浏览器中输入对应域名, 即可访问  <a href="https://motherkillermaker.github.io/">https://motherkillermaker.github.io/</a> </p><p><strong>至此，你便初步搭建好了一个属于自己的博客！（本地服务不用启动依然可以访问）</strong></p><p><strong>下一步便是进行博客的美化 ~</strong></p><p><strong>此处附加上 hexo 框架常用的指令：</strong></p><table><thead><tr><th align="left">指令</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>hexo clean &amp;&amp; hexo g</code></td><td>清除本地项目并重新生成 （重新部署时使用）</td></tr><tr><td align="left"><code>hexo g</code></td><td>重新生成</td></tr><tr><td align="left"><code>Hexo s</code></td><td>开启本地预览</td></tr><tr><td align="left"><code>Hexo d</code></td><td>推送到github</td></tr></tbody></table></li></ul><h1 id="四、hexo-博客的主题安装以及个性化修改"><a href="#四、hexo-博客的主题安装以及个性化修改" class="headerlink" title="四、hexo 博客的主题安装以及个性化修改"></a>四、hexo 博客的主题安装以及个性化修改</h1><h2 id="4-1-主题下载与安装"><a href="#4-1-主题下载与安装" class="headerlink" title="4.1 主题下载与安装"></a>4.1 主题下载与安装</h2><p>​        点击 <a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载（推荐）：</p><p>​        直接在D:\JAVA项目\HexoData\themes目录下执行下面的命令（git bash here 处）：</p><p>​            <code>git clone git@github.com:blinkfox/hexo-theme-matery.git</code>  下载完成后便可看到对应的主题文件</p><p>​            </p><h2 id="4-2-主题的配置与使用"><a href="#4-2-主题的配置与使用" class="headerlink" title="4.2 主题的配置与使用"></a>4.2 主题的配置与使用</h2><h3 id="4-2-1-切换主题"><a href="#4-2-1-切换主题" class="headerlink" title="4.2.1 切换主题"></a>4.2.1 切换主题</h3><p><strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件。</p><p>站点配置文件就是根目录下的配置文件，比如我的博客文件在 <code>D:\JAVA项目\HexoData</code> 下，那么站点配置文件就是 <code>D:\JAVA项目\HexoData_config.yml</code>，</p><p>主题配置文件就是 <code>D:\JAVA项目\HexoData\hexo-theme-matery\_config.yml</code>。</p><p>另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。    </p><p>​    </p><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>hexo-theme-matery</code>，那么值就修改为 <code>theme: hexo-theme-matery</code></p><p>一些站点配置文件的其他地方的修改：</p><ul><li>语言选择：如果为中文用户，则在 <code>language:</code> 后添加值 <code>zh-CN</code>，如果不修改，默认为英语；</li><li>网址修改：<code>url:</code> 的值为你的网址名，如 <code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可;</li><li>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</li></ul><h3 id="4-2-2-创建标签页面-（首页的标签选项）"><a href="#4-2-2-创建标签页面-（首页的标签选项）" class="headerlink" title="4.2.2 创建标签页面 （首页的标签选项）"></a>4.2.2 创建标签页面 （首页的标签选项）</h3><ul><li><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下（source目录下 右键 git bash here）：</p><pre><code>hexo new page "tags"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p></li></ul><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><ul><li><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "categories"</code></pre></li></ul><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><ul><li><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre><code>hexo new page "about"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><ul><li><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre><code>hexo new page "contact"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---</code></pre><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p><h3 id="4-2-3-添加emoji表情支持"><a href="#4-2-3-添加emoji表情支持" class="headerlink" title="4.2.3 添加emoji表情支持"></a>4.2.3 添加emoji表情支持</h3><p>安装命令如下：</p><pre><code>npm install hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>ithubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用 <code>emoji</code> 语法写的表情了。</p><h3 id="4-2-4-代码高亮"><a href="#4-2-4-代码高亮" class="headerlink" title="4.2.4 代码高亮"></a>4.2.4 代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code>prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h3 id="4-2-5-开启主页搜索功能"><a href="#4-2-5-开启主页搜索功能" class="headerlink" title="4.2.5 开启主页搜索功能"></a>4.2.5 开启主页搜索功能</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h3 id="4-2-6-开启中文链接转拼音功能"><a href="#4-2-6-开启中文链接转拼音功能" class="headerlink" title="4.2.6 开启中文链接转拼音功能"></a>4.2.6 开启中文链接转拼音功能</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p><h3 id="4-2-7-开启文章字数统计插件"><a href="#4-2-7-开启文章字数统计插件" class="headerlink" title="4.2.7 开启文章字数统计插件"></a>4.2.7 开启文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><p>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre><code>wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h3 id="4-2-8-修改页脚"><a href="#4-2-8-修改页脚" class="headerlink" title="4.2.8 修改页脚"></a>4.2.8 修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="4-2-9-新增和修改社交链接"><a href="#4-2-9-新增和修改社交链接" class="headerlink" title="4.2.9 新增和修改社交链接"></a>4.2.9 新增和修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><p>新增我的CSDN链接</p><pre><code>&lt;% if (theme.socialLink.csdn) { %&gt;    &lt;a href="&lt;%= theme.socialLink.csdn %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-csdn"&gt;CSDN&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><p>接着你需要在主题配置文件下新增CSDN链接</p><pre><code>socialLink:  qq: 624597867  weixin: https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/wechat.png  github:   email:   facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  weibo: # https://weibo.com/xxx  csdn: https://blog.csdn.net/victoryxa  # 新增CSDN链接 </code></pre><h3 id="4-2-10-添加评论系统"><a href="#4-2-10-添加评论系统" class="headerlink" title="4.2.10 添加评论系统"></a>4.2.10 添加评论系统</h3><p>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：</p><ul><li><p>City 版：是一款适合所有人使用的免费版本；</p></li><li><p>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115142313.png" alt="img"></p><p>注册完之后，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/image-20200115142709585.png" alt="img"></p><pre><code># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid</code></pre></li></ul><p>然后在<strong>主题配置文件</strong>相关的部署命令，然后查看效果即可。</p><h2 id="4-3-自定义修改"><a href="#4-3-自定义修改" class="headerlink" title="4.3 自定义修改"></a>4.3 自定义修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="4-3-1-修改主题颜色"><a href="#4-3-1-修改主题颜色" class="headerlink" title="4.3.1 修改主题颜色"></a>4.3.1 修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><p><strong>Tips：建议使用第三方工具（如IDE）打开css文件，使用查找功能（ctrl + f）来快速定位</strong></p><h3 id="4-3-2-修改banner图和文章特色图"><a href="#4-3-2-修改banner图和文章特色图" class="headerlink" title="4.3.2 修改banner图和文章特色图"></a>4.3.2 修改banner图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre><code>$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>说明： banner图即为你博客主页所显示的图片 （默认为 <code>0.jpg</code> ）</p><h3 id="4-3-3-修改网站上的相关信息"><a href="#4-3-3-修改网站上的相关信息" class="headerlink" title="4.3.3 修改网站上的相关信息"></a>4.3.3 修改网站上的相关信息</h3><p>首先看图：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115115221.png" alt="img"></p><p>相关配置信息如下：</p><pre><code>#这是根目录下的配置文件信息title: 过客~励む                                                   #这是网站标题subtitle: 励む                                                 #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description: 专注于Web,分享生活,分享知识                              #网站描述keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]       #网站的关键词author: YangAir                                                #作者，文章版权所显示的language: zh-CN                                                 #网站语言，不填写，默认为英文timezone:                                                      #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/favicon.pnglogo: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:   enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 志之所向，金石为开，谁能御之？  sub2: 花开不是为了花落，而是为了开的更加灿烂。  sub3: 没有伞的孩子必须努力奔跑！  sub4: 欲望以提升热忱，毅力以磨平高山。  sub5: 如果放弃太早，你永远都不知道自己会错过什么。  sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</code></pre><p><strong>注意：</strong></p><p>网站打字效果副标题默认有两个，即 <code>sub1</code> 和 <code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 <code>sub1</code> 和 <code>sub2</code> 后面继续添加即可，然后在去主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>bg-cover-content.ejs</code> 文件，大约在 12 行左右，如下面所示：</p><pre><code> &lt;div class="description center-align"&gt;     &lt;% if (theme.subtitle.enable) { %&gt;         &lt;span id="subtitle"&gt;&lt;/span&gt;         &lt;script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11"&gt;&lt;/script&gt;        &lt;script&gt;            var typed = new Typed("#subtitle", {                strings: ['&lt;%= theme.subtitle.sub1 %&gt;',                          '&lt;%= theme.subtitle.sub2 %&gt;',                          '&lt;%= theme.subtitle.sub3 %&gt;',                          '&lt;%= theme.subtitle.sub4 %&gt;',                          '&lt;%= theme.subtitle.sub5 %&gt;',                          '&lt;%= theme.subtitle.sub6 %&gt;'],                 startDelay: &lt;%= theme.subtitle.startDelay %&gt;,                 typeSpeed: &lt;%= theme.subtitle.typeSpeed %&gt;,                 loop: &lt;%= theme.subtitle.loop %&gt;,                    backSpeed: &lt;%= theme.subtitle.backSpeed %&gt;,                 showCursor: &lt;%= theme.subtitle.showCursor %&gt;              });          &lt;/script&gt;      &lt;% } else { %&gt;            &lt;%= config.description %&gt;      &lt;% } %&gt;&lt;/div&gt;</code></pre><h3 id="4-3-4-在关于我页面添加个人简历"><a href="#4-3-4-在关于我页面添加个人简历" class="headerlink" title="4.3.4 在关于我页面添加个人简历"></a>4.3.4 在关于我页面添加个人简历</h3><p>打开 <code>theme/matery/layout/about.ejs</code> 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><pre><code>&lt;div class="card"&gt;     &lt;div class="card-content"&gt;         &lt;div class="card-content article-card-content"&gt;             &lt;div class="title center-align" data-aos="zoom-in-up"&gt;                 &lt;i class="fa fa-address-book"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('个人简历') %&gt;              &lt;/div&gt;                 &lt;div id="articleContent" data-aos="fade-up"&gt;                     &lt;%- page.content %&gt;                 &lt;/div&gt;           &lt;/div&gt;      &lt;/div&gt;&lt;/div&gt;</code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个 card，然后 <code>/source/about/index.md</code> 下面写上你的简历了（就像写博客一样）。</p><h1 id="五、博客的编写以及推送"><a href="#五、博客的编写以及推送" class="headerlink" title="五、博客的编写以及推送"></a>五、博客的编写以及推送</h1><ul><li>第一步：创建<code>.md</code>文件</li></ul><p> 方法1：定位到我们的hexo根目录，Git Bash Here 中执行命令：  </p><p><code>hexo new 'my-first-blog'</code>    其中引号内为文章名称         </p><p>hexo会帮我们在<code>D:\JAVA项目\HexoData\source\_posts</code> 下生成相关.md文件，用这个命令的好处是帮我们自动生成了时间，方法1默认生成如下内容：</p><pre><code>title: my-first-blotdate: 2021-11-29 18:21:30tags:</code></pre><p>方法2：当然你也可以直接自己打开<code>D:\JAVA项目\HexoData\source\_posts</code> 目录新建<code>.md</code>文件 </p><ul><li><p>第二步：编写并保存 </p><p>我们只需要用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可 </p></li><li><p>第三步：清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令：</p><pre><code>hexo cleanhexo ghexo d </code></pre><p><strong>补充：<code>hexo new page 'postName'</code>命令和<code>hexo new 'postName'</code>的区别？</strong> </p></li></ul><p>​    <code>hexo new page 'My-second-blog'</code>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>​        搭建该博客花了大概三天时间，写自己的第一篇博文也花了一天时间。希望此博文对各位看官有小小的帮助，今后还会继续更新自己的学习笔记，希望大家多多关注~</p><p>​        后会有期 ~</p><p><strong>参考文献：</strong></p><ol><li><a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></li><li><a href="https://www.bilibili.com/read/cv12633102">https://www.bilibili.com/read/cv12633102</a></li><li>theme-matery 主题官方使用说明 <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇博文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
