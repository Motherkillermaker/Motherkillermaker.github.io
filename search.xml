<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速排序算法详解</title>
      <link href="/2021/12/27/kuai-su-pai-xu/"/>
      <url>/2021/12/27/kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序算法详解"><a href="#快速排序算法详解" class="headerlink" title="快速排序算法详解"></a>快速排序算法详解</h1><h2 id="一、什么是快速排序算法"><a href="#一、什么是快速排序算法" class="headerlink" title="一、什么是快速排序算法"></a>一、什么是快速排序算法</h2><p>快速排序是对<a href="http://data.biancheng.net/view/70.html">冒泡排序</a>的一种改进，由 C.A.R.Hoare（Charles Antony Richard Hoare，东尼·霍尔）在 1962 年提出。</p><p><strong>快速排序基本思想</strong>：</p><p>通过一趟排序将要排序的数据分割成独立的两部分，<strong>其中一部分的所有数据比另一部分的所有数据要小</strong>，再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列。</p><p><strong>快速排序原理：</strong></p><p>排序算法的思想非常简单，在待排序的数列中，我们首先要找一个数字作为<strong>基准数</strong>（这只是个专用名词）。</p><p><strong>注意：这里的基准数为每一趟比较的中枢，该数的选取将决定快排算法的速度快慢</strong></p><p>为了方便，我们一般选择第 1 个数字作为基准数（其实选择第几个并没有关系）。接下来我们需要把这个待排序的数列中小于基准数的元素移动到待排序的数列的左边，把大于基准数的元素移动到待排序的数列的右边。这时，左右两个分区的元素就相对有序了；接着把两个分区的元素分别按照上面两种方法继续对每个分区找出基准数，然后移动，直到各个分区只有一个数时为止。</p><p><strong>这是典型的分治思想，即分治法。</strong></p><h1 id="二、快速排序的实现"><a href="#二、快速排序的实现" class="headerlink" title="二、快速排序的实现"></a>二、快速排序的实现</h1><h2 id="1-单指针"><a href="#1-单指针" class="headerlink" title="1.单指针"></a>1.<strong>单指针</strong></h2><p>问题引入：</p><pre class="line-numbers language-none"><code class="language-none">给定一个数组arr，和一个数num，请把小于等于num的数放在数组的左边，大于num的数放在数组的右边。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>思路：</p><p>通过指针确定一个 小于区域（该区域内所有元素均小于num，初始下标为 -1）</p><p>依次遍历数组，若当前遍历元素小于或等于num，则将<strong>当前遍历元素（下标为i）</strong>与 **小于区域的下一个位置元素(下标为 less + 1)**进行交换</p><p>若当前遍历元素大于num则继续遍历</p><p>边界情况考虑：</p><p>若第一个元素需要交换则 自己和自己交换。符合题意</p><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void arrange(int[] arr, int num) {    // 初始 x 区域的下标 =&gt; 指针    int less = -1;    for (int i = 0; i &lt; arr.length; i++) {        if (arr[i] &lt;= num) {            // 前++是先自加再使用, 而后++是先使用再自加            // x 先 + 1， 然后与 i 位置上的值交换 =&gt;  i 与 x 的下一个位置进行交换            swap(arr, i, ++less);        }    }}public static void swap(int[] arr, int i, int j) {        if (i == j) {            return;        }        arr[i] = arr[i] ^ arr[j];        arr[j] = arr[i] ^ arr[j];        arr[i] = arr[i] ^ arr[j];    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-双指针"><a href="#2-双指针" class="headerlink" title="2.双指针"></a>2.<strong>双指针</strong></h2><p>问题引入：</p><pre class="line-numbers language-none"><code class="language-none">给定一个数组arr，和一个数num，请把小于等于num的数放在数组的左边，大于num的数放在数组的右边，等于num的数放中间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>思路：</p><p>通过头指针<strong>less</strong>确定一个 小于区域（该区域内所有元素均小于num，初始下标为 -1 ）</p><p>通过尾指针<strong>more</strong>确定一个 大于区域（该区域内所有元素均大于num，初始下标为 arr.length ）</p><p>依次遍历数组，若当前遍历元素小于或等于num，则将<strong>当前遍历元素（下标为i）</strong>与 <strong>小于区域的下一个位置元素(下标为 less + 1)<strong>进行交换；若当前遍历元素大于num，则将</strong>当前遍历元素（下标为i）</strong>与 **大于区域的下一个位置元素(下标为 more - 1)**进行交换；即头指针向后走，尾指针向前走，当遍历到尾指针时循环结束（所有元素均已比较）</p><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void sortColors(int[] arr, int n) {    // 小于区域指针    int less = -1;    // 大于区域指针    int more = arr.length;    // 数组指针    int i = 0;    // 指针遇到大于区域的前一个位置 =&gt; 停止循环    while (i &lt; more) {        // 当前数字大于给定数字，当前数字与大于区域的下一个交换        if (arr[i] &gt; n) {            swap(arr, i, --more);        }else if (arr[i] &lt; n) {            // 当前数字小于给定数字，当前数字与小于区域的下一个交换            swap(arr, i, ++less);        }else {            // 当前数字等于给定数字，指针向后移动            i++;        }    }}public static void swap(int[] arr, int i, int j) {        if (i == j) {            return;        }        arr[i] = arr[i] ^ arr[j];        arr[j] = arr[i] ^ arr[j];        arr[i] = arr[i] ^ arr[j];    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-快速排序算法实现"><a href="#3-快速排序算法实现" class="headerlink" title="3.快速排序算法实现"></a>3.<strong>快速排序算法实现</strong></h2><p>理解了单指针和双指针，接下来让我们使用分治的思想，利用递归来解决快速排序问题</p><p>在双指针问题上，我们已经可以做到让一个数的左右有序（<strong>左边的值均小于右边的值</strong>）</p><p>那么如果继续在该数的左右两边再次使用该方法，我们便又可以确定两个数，使得这两个数的左右有序</p><p>以此类推，继续下去，我们便可以让更多的数有序，这便是利用递归实现快速排序的基本思想</p><p>让我们先来实现主方法：</p><p>传入一个数组，若该数组为空或少于两个元素则直接返回；</p><p>否则开始使用快速排序算法进行排序 (传入初始元素下标0 和 末尾元素下标)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void QuickSort(int[] arr) {    if (arr == null || arr.length &lt; 2) {        return;    }    qicksortV1(arr, 0, arr.length - 1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着让我们来实现快速排序算法：</p><p>接收到主方法传入的参数后，首先利用partition方法确定中间的位置，即先让一个数的左右两边有序并返回此时中枢的下标；</p><p>接着让左边有序；</p><p>最后让右边有序；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void qicksortV1(int[] arr, int L, int R) {    // 双指针基础上 左右递归进行    if (L &lt; R) {        // 局部确定中枢        int pivotloc = partition(arr,L,R);        // 局部左边有序        qicksortV1(arr,L,pivotloc - 1);        // 局部右边有序        qicksortV1(arr,pivotloc + 1, R);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到算法十分的简洁，但问题是如何寻找到当前传入数组的中枢位置并返回？让我们来看看partition方法的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 快速排序确定中枢位置 * @param: arr 传入的数组 * @param: low 要确定中枢区域的头指针 * @param: high 要确定中枢区域的尾指针 * @return: 中枢位置 */public static int partition(int[] arr, int low, int high) {    // 以最左侧为基准放在中间 (该数的选择会影响快速排序的效率)    int pivot = arr[low];    while (low &lt; high) {        // 尾指针的值大于中枢，尾指针 --        while (low &lt; high &amp;&amp; arr[high] &gt;= pivot) {            high--;        }        // 循环停止，当前尾指针所指元素小于中枢元素 =&gt; 搬到前面        arr[low] = arr[high];        // 头指针的值小于中枢，头指针 ++        while (low &lt; high &amp;&amp; arr[low] &lt;= pivot) {            low++;        }        // 循环停止，当前头指针所指元素大于中枢元素 =&gt; 搬到后面        arr[high] = arr[low];    }    // 循环结束 此时 low 和 high 相等 =&gt; 该位置用于放置中枢位置    arr[low] = pivot;    // 返回中枢位置    return low;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到该方法与双指针例题极为相似，双指针需要交换，而该方法则是需要返回中枢的位置。</p><p>完整的快速排序代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void QuickSort(int[] arr) {    if (arr == null || arr.length &lt; 2) {        return;    }    qicksortV1(arr, 0, arr.length - 1);}public static void qicksortV1(int[] arr, int L, int R) {    // 双指针基础上 左右递归进行    if (L &lt; R) {        // 局部确定中枢        int pivotloc = partition(arr,L,R);        // 局部左边有序        qicksortV1(arr,L,pivotloc - 1);        // 局部右边有序        qicksortV1(arr,pivotloc + 1, R);    }}/** * 快速排序确定中枢位置 * @param arr 传入的数组 * @param low 要确定中枢区域的头指针 * @param high 要确定中枢区域的尾指针 * @return 中枢位置 */public static int partition(int[] arr, int low, int high) {    // 以最左侧为基准放在中间    int pivot = arr[low];    while (low &lt; high) {        // 尾指针的值大于中枢，尾指针 --        while (low &lt; high &amp;&amp; arr[high] &gt;= pivot) {            high--;        }        // 循环停止，当前尾指针所指元素小于中枢元素 =&gt; 搬到前面        arr[low] = arr[high];        // 头指针的值小于中枢，头指针 ++        while (low &lt; high &amp;&amp; arr[low] &lt;= pivot) {            low++;        }        // 循环停止，当前头指针所指元素大于中枢元素 =&gt; 搬到后面        arr[high] = arr[low];    }    // 循环结束 此时 low 和 high 相等 =&gt; 该位置用于放置中枢位置    arr[low] = pivot;    return low;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><p><strong>经典快排：</strong></p><p>从上述代码我们可以看到一次只搞定一个数，每次将初始的左侧数作为基准放在中间，&lt;基准数的放左边，&gt;=基准数的放右边；<strong>这样会导致右边会包含等于基准值的若干个数</strong>。接着返回基准值的左边部分和右边部分，再对左右部分进行上述操作，最终对数组完成排序。经典快排可能导致子区域划分极不平均。<br>当数据为{1,2,3, 4,5,6,7}时，每次将第一个数作为基准，所需时间复杂度：O（N*N）</p><p>那如何挑选基准，使得挑选中枢的时间缩短呢？</p><p><strong>改进后的经典快排：</strong></p><p>改进后的快排一次搞定一部分数（=pivot的那部分），总体来说，经典快排每次递归调用只有一个数不动，其他的需要进行二次甚至多次递归；而<strong>改进后的则是=pivot的一部分数全都不动</strong>，<strong>只需递归 &lt;x 或者 &gt;x的数即可。</strong><br>为了避免经典快排可能导致子区域划分极不平均，改进后的快排则是随机抽取数组中的一个数作为基准值对数组进行排序。</p><p>其时间和空间复杂度依次为：</p><p>时间复杂度O(N*logN)，空间复杂度O(logN);</p><p><strong>递归过程（改进的快速排序）</strong></p><p>中枢位置为一个数组，即中枢开始的位置和中枢结束的位置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void qicksortV2(int[] arr, int L, int R) {    // 双指针基础上 左右递归进行    if (L &lt; R) {        //先随机取出一个数放到最后(取出下标)        int randloc = (int) (Math.random() * (R - L + 1));        swap(arr, L + randloc, R);        // 局部确定中枢 （0位置为第一个中枢位置，1位置为最后一个中枢位置）        int[] pivotloc = partition(arr, L, R);        // 局部左边有序        qicksortV2(arr, L, pivotloc[0] - 1);        // 局部右边有序        qicksortV2(arr, pivotloc[1] + 1, R);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>partition 过程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 快速排序确定中枢位置 （中枢开始的位置和结束的位置） =&gt; 双指针经典用法 * * @param arr * @param low * @param high * @return */public static int[] partition(int[] arr, int low, int high) {    // 小于区域指针    int less = low - 1;    // 大于区域指针    int more = high;    // low为数组指针    while (low &lt; more) {        // 当前数字大于给定数字，当前数字与大于区域的下一个交换        if (arr[low] &gt; arr[high]) {            // 前++是先自加再使用, 而后++是先使用再自加            swap(arr, low,--more);        } else if (arr[low] &lt; arr[high]) {            // 当前数字小于给定数字，当前数字与小于区域的下一个交换，指针向前移动            swap(arr, low++, ++less);        } else {            // 当前数字等于给定数字，指针向后移动            low++;        }    }    // 循环结束，less指向中枢的前一个位置，more指向    swap(arr,more,high);    return new int[]{less + 1, more};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>改进的快速排序完整代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void QuickSort(int[] arr) {    if (arr == null || arr.length &lt; 2) {        return;    }    qicksortV2(arr, 0, arr.length - 1);}public static void qicksortV2(int[] arr, int L, int R) {    // 双指针基础上 左右递归进行    if (L &lt; R) {        //先随机取出一个数放到最后(取出下标)        int randloc = (int) (Math.random() * (R - L + 1));        swap(arr, L + randloc, R);        // 局部确定中枢 （0位置为第一个中枢位置，1位置为最后一个中枢位置）        int[] pivotloc = partition(arr, L, R);        // 局部左边有序        qicksortV2(arr, L, pivotloc[0] - 1);        // 局部右边有序        qicksortV2(arr, pivotloc[1] + 1, R);    }}/** * 快速排序确定中枢位置 （中枢开始的位置和结束的位置） =&gt; 双指针经典用法 * * @param arr * @param low * @param high * @return */public static int[] partition(int[] arr, int low, int high) {    // 小于区域指针    int less = low - 1;    // 大于区域指针    int more = high;    // low为数组指针    while (low &lt; more) {        // 当前数字大于给定数字，当前数字与大于区域的下一个交换        if (arr[low] &gt; arr[high]) {            // 前++是先自加再使用, 而后++是先使用再自加            swap(arr, low,--more);        } else if (arr[low] &lt; arr[high]) {            // 当前数字小于给定数字，当前数字与小于区域的下一个交换，指针向前移动            swap(arr, low++, ++less);        } else {            // 当前数字等于给定数字，指针向后移动            low++;        }    }    // 循环结束，less指向中枢的前一个位置，more指向中枢的后一个位置    // 将最后位置的中枢与more交换，此时more即为中枢的最后一个位置    swap(arr,more,high);    return new int[]{less + 1, more};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、快速排序的特点及性能"><a href="#三、快速排序的特点及性能" class="headerlink" title="三、快速排序的特点及性能"></a>三、快速排序的特点及性能</h1><p>快速排序是在冒泡排序的基础上改进而来的，冒泡排序每次只能交换相邻的两个元素，而快速排序是跳跃式的交换，交换的距离很大，因此总的比较和交换次数少了很多，速度也快了不少。</p><p>但是快速排序在最坏情况下的<a href="http://data.biancheng.net/view/2.html">时间复杂度</a>和冒泡排序一样，是 <code>O(n2)</code>，实际上每次比较都需要交换，但是这种情况并不常见。我们可以思考一下如果每次比较都需要交换，那么数列的平均时间复杂度是 <code>O(nlogn)</code>，事实上在大多数时候，排序的速度要快于这个平均时间复杂度。这种算法实际上是一种分治法思想，也就是分而治之，把问题分为一个个的小部分来分别解决，再把结果组合起来。</p><p>快速排序只是使用数组原本的空间进行排序，所以所占用的空间应该是常量级的，但是由于每次划分之后是递归调用，所以递归调用在运行的过程中会消耗一定的空间，在一般情况下的<a href="http://data.biancheng.net/view/2.html">空间复杂度</a>为 <code>O(logn)</code>，在最差的情况下，若每次只完成了一个元素，那么空间复杂度为 <code>O(n)</code>。所以我们一般认为快速排序的空间复杂度为 <code>O(logn)</code>。</p><p>快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。</p><p>快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2021/12/25/springcloud/"/>
      <url>/2021/12/25/springcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SpringCloud是什么"><a href="#一、SpringCloud是什么" class="headerlink" title="一、SpringCloud是什么"></a>一、SpringCloud是什么</h1><p>SpringCloud的目标是微服务架构下的一站式解决方案。</p><p><strong>SpringCloud生态图</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zczIuYmRzdGF0aWMuY29tLzcwY0Z2blNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTE2Mzc3ODY4OTcsNzQ1MTM1MjUxJmZtPTI2JmdwPTAuanBn?x-oss-process=image/format,png" alt="SpringCloud生态图"></p><p><strong>SpringCloud能干嘛？</strong></p><ul><li><p>Distributed/versioned configuration 分布式/版本控制配置</p></li><li><p>Service registration and discovery 服务注册与发现</p></li><li><p>Routing 路由</p></li><li><p>Service-to-service calls 服务到服务的调用</p></li><li><p>Load balancing 负载均衡配置</p></li><li><p>Circuit Breakers 断路器</p></li><li><p>Distributed messaging 分布式消息管理</p></li><li><p>…</p></li></ul><h2 id="1-1-SpringCloud和SpringBoot的关系"><a href="#1-1-SpringCloud和SpringBoot的关系" class="headerlink" title="1.1 SpringCloud和SpringBoot的关系"></a>1.1 SpringCloud和SpringBoot的关系</h2><ul><li>SpringBoot专注于开苏方便的开发单个个体微服务；</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目，但SpringCloud离不开SpringBoot，属于依赖关系；</li><li>SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li></ul><h2 id="1-2-SpringCloud的通信方式"><a href="#1-2-SpringCloud的通信方式" class="headerlink" title="1.2 SpringCloud的通信方式"></a>1.2 SpringCloud的通信方式</h2><p><strong>Spring Cloud 抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式</strong></p><p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。</p><img src="/2021/12/25/springcloud/1.png" class="" title="Dubbo和SpringCloud技术选型"><h2 id="1-3-SpringCloud五大件"><a href="#1-3-SpringCloud五大件" class="headerlink" title="1.3 SpringCloud五大件"></a>1.3 SpringCloud五大件</h2><p>服务访问        =&gt;        Netfix Zuul</p><p>服务通信        =&gt;        Feign –&gt; HttpClient —&gt; HTTP的通信方式 ( 同步并阻塞 )</p><p>服务治理        =&gt;        Netfix Eureka( 服务注册与发现 )</p><p>服务熔断        =&gt;        Netfix Hystrix  ( 熔断机制 )</p><p>负载均衡        =&gt;        客户端负载均衡：Netfix Ribbon</p><p>​                                    服务端负载均衡：Feign(依赖于Ribbon，只是将调用方式RestTemplate更改为Service接口)</p><p>分布式配置    =&gt;        SpringCloud Config</p><h1 id="二、SpringCloud常见面试题"><a href="#二、SpringCloud常见面试题" class="headerlink" title="二、SpringCloud常见面试题"></a>二、SpringCloud常见面试题</h1><p>1、什么是微服？</p><p>2、微服务之间是如何独立通讯的？</p><p>3、SpringCloud和Dubbo有哪些区别？</p><p>4、SpringBoot和SpringCIoud,请你谈谈对他们的理解</p><p>5、什么是服务熔断？什么是服务降级</p><p>6、微服务的优缺点是分别是什么？说下你在项目开发中遇到的坑</p><p>7、你所知道的微服务技术栈有哪些？请列举一二</p><p>8、eureka和zookeeper都可以提供服务注册与发现的功能，请说说两个的区别？</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务概述</title>
      <link href="/2021/12/25/wei-fu-wu-gai-shu/"/>
      <url>/2021/12/25/wei-fu-wu-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、为什么需要微服务架构"><a href="#一、为什么需要微服务架构" class="headerlink" title="一、为什么需要微服务架构"></a>一、为什么需要微服务架构</h1><p><strong>使用微服务架构的核心：解耦</strong></p><h2 id="1-1-什么是微服务"><a href="#1-1-什么是微服务" class="headerlink" title="1.1 什么是微服务"></a>1.1 什么是微服务</h2><p>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p><ul><li>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。</li><li>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它体长将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(<strong>HTTP</strong>)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(<strong>Maven</strong>)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</li></ul><p>再来从技术维度角度理解下：</p><ul><li>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</li></ul><h2 id="1-2-微服务与微服务架构"><a href="#1-2-微服务与微服务架构" class="headerlink" title="1.2 微服务与微服务架构"></a>1.2 微服务与微服务架构</h2><p><strong>微服务</strong></p><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者Moudel。IDEA 工具里面使用Maven开发的一个个独立的小Moudel，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p><p><strong>微服务架构</strong></p><p>一种新的架构形式，Martin Fowler 于2014年提出。</p><p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如HTTP)<strong>互相协作，</strong>每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具(如Maven)对其进行构建。**</p><h2 id="1-3-微服务的优缺点"><a href="#1-3-微服务的优缺点" class="headerlink" title="1.3 微服务的优缺点"></a>1.3 微服务的优缺点</h2><p>优点</p><ul><li>单一职责原则；</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li><li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li><li>微服务能够被小团队单独开发，这个团队只需2-5个开发人员组成；</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li><li>微服务能使用不同的语言开发；</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li><li>微服务允许利用和融合最新技术；</li><li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</strong></li><li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li></ul><p>​    缺点</p><ul><li>开发人员要处理分布式系统的复杂性；</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li><li>系统部署依赖问题；</li><li>服务间通信成本问题；</li><li>数据一致性问题；</li><li>系统集成测试问题；</li><li>性能和监控问题；</li></ul><h2 id="1-4-微服务技术栈"><a href="#1-4-微服务技术栈" class="headerlink" title="1.4 微服务技术栈"></a>1.4 微服务技术栈</h2><table><thead><tr><th><strong>微服务技术条目</strong></th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td></tr><tr><td>时间消息总栈</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table><h1 id="二、微服务架构问题解决方案"><a href="#二、微服务架构问题解决方案" class="headerlink" title="二、微服务架构问题解决方案"></a>二、微服务架构问题解决方案</h1><h2 id="2-1-微服务架构问题"><a href="#2-1-微服务架构问题" class="headerlink" title="2.1 微服务架构问题"></a>2.1 微服务架构问题</h2><p>分布式架构会遇到的四个核心问题?</p><p><strong>1.这么多服务，客户端该如何去访问?</strong></p><p><strong>2.这么多服务，服务之间如何进行通信?</strong></p><p><strong>3.这么多服务，如何治理呢?</strong></p><p><strong>4.服务挂了，怎么办?</strong></p><p>对此，目前市场上提出了主流的三种方案</p><ol><li><strong>Spring Cloud NetFlix 出来了一套解决方案!  而且是一站式解决方案。</strong></li></ol><p>服务访问        =&gt;        Api网关，zuu1组件</p><p>服务通信        =&gt;        Feign –&gt; HttpClient —&gt; HTTP的通信方式 ( 同步并阻塞 )</p><p>服务治理        =&gt;        Eureka ( 服务注册与发现 )</p><p>服务熔断        =&gt;        Hystrix  ( 熔断机制 )</p><p>但 2018年年底，NetFlix宣布无限期停止维护。生态不再维护。</p><ol start="2"><li><strong>Apache Dubbo zookeeper，第二套解决方案</strong></li></ol><p>服务访问        =&gt;        API 没有，要么找第三方组件，要么自己实现</p><p>服务通信        =&gt;        Dubbo （基于Java实现的高性能RPC通信框架）</p><p>服务治理        =&gt;        zookeeper ( 服务注册与发现 )</p><p>服务熔断        =&gt;        没有，但借助了Hystrix</p><ol start="3"><li><strong>SpringCloud Alibaba - 站式解决方案!</strong></li></ol><p>服务访问        =&gt;        Gateway</p><p>服务通信        =&gt;        Feign –&gt; HttpClient —&gt; HTTP的通信方式 ( 同步并阻塞 )</p><p>服务治理        =&gt;        Nacos( 服务注册与发现 )</p><p>服务熔断        =&gt;        Sentinel  ( 限流降级 )</p><p>负载均衡        =&gt;        Ribbon</p><p>消息驱动        =&gt;        RocketMQ</p><p>目前，又提出了一种方案:</p><p>服务网格: 下一代微服务标准，Server Mesh</p><p>但万变不离其宗，主要还是解决以下问题：</p><ol><li><strong>API网关，服务路由 （服务访问）</strong></li><li><strong>HTTP, RPC框架，异步调用 （服务通信）</strong></li><li><strong>服务注册与发现，高可用 （服务治理）</strong></li><li><strong>熔断机制，服务降级 （服务熔断）</strong></li></ol><p><strong>目前一般网站的分布式架构图</strong></p><img src="/2021/12/25/wei-fu-wu-gai-shu/4.png" class="" title="分布式架构图"><h2 id="2-2-为什么选择SpringCloud作为微服务架构"><a href="#2-2-为什么选择SpringCloud作为微服务架构" class="headerlink" title="2.2 为什么选择SpringCloud作为微服务架构"></a>2.2 为什么选择SpringCloud作为微服务架构</h2><ol><li><p><strong>选型依据</strong></p><ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线</li></ul></li><li><p><strong>当前各大IT公司用的微服务架构有那些？</strong></p><ul><li><p>阿里：dubbo+HFS</p></li><li><p>京东：JFS</p></li><li><p>新浪：Motan</p></li><li><p>当当网：DubboX</p><p>…</p></li></ul></li><li><p><strong>各微服务框架对比</strong></p><img src="/2021/12/25/wei-fu-wu-gai-shu/2.png" class="" title="各微服务框架对比"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo + Zookeeper介绍</title>
      <link href="/2021/12/07/dubbozookeeper-jie-shao/"/>
      <url>/2021/12/07/dubbozookeeper-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Dubbo"><a href="#一、Dubbo" class="headerlink" title="一、Dubbo"></a>一、Dubbo</h1><h2 id="1-1-什么是Dubbo"><a href="#1-1-什么是Dubbo" class="headerlink" title="1.1 什么是Dubbo?"></a>1.1 <strong>什么是Dubbo?</strong></h2><p>Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架。</p><p>它提供了三大核心能力：</p><p><strong>面向接口的远程方法调用</strong></p><p><strong>智能容错和负载均衡</strong></p><p><strong>服务自动注册和发现</strong></p><p> <a href="https://dubbo.apache.org/zh/">dubbo官网</a> </p><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需一个治理系统确保架构有条不紊的演进。</p><p>在Dubbo的官网文档有这样一张图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/90d8839b7de5d414d00d8d18d4fc38fe.png" alt="传统网站架构向分布式架构过渡"></p><p><strong>该图显示了传统应用网站架构是如何向分布式架构过渡的</strong></p><img src="/2021/12/07/dubbozookeeper-jie-shao/1.png" class="" title="单一应用结构"><img src="/2021/12/07/dubbozookeeper-jie-shao/2.png" class="" title="垂直应用架构"><img src="/2021/12/07/dubbozookeeper-jie-shao/3.png" class="" title="分布式架构"><img src="/2021/12/07/dubbozookeeper-jie-shao/4.png" class="" title="流动计算架构"><h2 id="1-2-Dubbo-架构"><a href="#1-2-Dubbo-架构" class="headerlink" title="1.2 Dubbo 架构"></a>1.2 Dubbo 架构</h2><img src="/2021/12/07/dubbozookeeper-jie-shao/5.png" class="" title="Dubbo架构图"><p><strong>服务提供者(Provider)：</strong>暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者(Consumer)：</strong>调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消<br>费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心（Registry)：</strong>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p><strong>监控中心(Monitor)：</strong>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h2 id="1-3-调用关系说明"><a href="#1-3-调用关系说明" class="headerlink" title="1.3 调用关系说明"></a>1.3 调用关系说明</h2><p><strong>调用关系说明</strong></p><p>| 服务容器负启动，加载，运行服务提供者。</p><p>| 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>| 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p>| 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p>| 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>| 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h2 id="1-4-Dubbo说明"><a href="#1-4-Dubbo说明" class="headerlink" title="1.4 Dubbo说明"></a>1.4 Dubbo说明</h2><p>dobbo本身并不是一个软件。</p><p>它其实就是一个jar包，能够帮你的java程序连接到zookeeper注册中心，并利用zookeeper消费以及提供服务</p><p>但是为了让用户更好的管理和监控众多的dubbo服务，dubbo官方提供了一个可视化的监控程序—dubbo admin，不过这个监控程序不按照也不会影响dubbo的使用。</p><h1 id="二、Zookeeper"><a href="#二、Zookeeper" class="headerlink" title="二、Zookeeper"></a>二、Zookeeper</h1><h2 id="2-1-什么是zookeeper"><a href="#2-1-什么是zookeeper" class="headerlink" title="2.1 什么是zookeeper?"></a>2.1 什么是zookeeper?</h2><p>​        官方文档上这么解释zookeeper，它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：<strong>统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理</strong>等。</p><p>上面的解释有点抽象，简单来说  <strong>zookeeper=文件系统+监听通知机制</strong>。</p><h2 id="2-2-zookeeper的功能"><a href="#2-2-zookeeper的功能" class="headerlink" title="2.2 zookeeper的功能"></a>2.2 zookeeper的功能</h2><p><strong>1、文件系统</strong></p><p>Zookeeper维护一个类似文件系统的数据结构：</p><p><img src="https://img-blog.csdn.net/201807121434154?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFfNjY2NjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>每个子目录项如 NameService 都被称作为 znode(目录节点)，和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，唯一的不同在于znode是可以存储数据的。</p><p>有四种类型的znode：</p><ul><li><p><strong>PERSISTENT-持久化目录节点</strong></p><p>客户端与zookeeper断开连接后，该节点依旧存在</p></li><li><p><strong>PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点</strong></p><p>客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</p></li><li><p><strong>EPHEMERAL-临时目录节点</strong></p><p>客户端与zookeeper断开连接后，该节点被删除</p></li><li><p><strong>EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点</strong></p><p>客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</p></li></ul><p><strong>2、监听通知机制</strong></p><p>客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。</p><h2 id="2-3-分布式应用配置管理举例"><a href="#2-3-分布式应用配置管理举例" class="headerlink" title="2.3 分布式应用配置管理举例"></a>2.3 分布式应用配置管理举例</h2><p>假设我们的程序是分布式部署在多台机器上，如果我们要改变程序的配置文件，需要逐台机器去修改，非常麻烦，现在把这些配置全部放到zookeeper上去，保存在 zookeeper 的某个目录节点中，然后所有相关应用程序对这个目录节点进行监听，一旦配置信息发生变化，每个应用程序就会收到 zookeeper 的通知，然后从 zookeeper 获取新的配置信息应用到系统中。</p><p><img src="https://img-blog.csdn.net/20180712143454552?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFfNjY2NjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="分布式应用举例"></p><p>参考文献：</p><p>1、<a href="https://blog.csdn.net/java_66666/article/details/81015302?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163886867716780271586538%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163886867716780271586538&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81015302.first_rank_v2_pc_rank_v29&amp;utm_term=zookeeper&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/java_66666/article/details/81015302?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163886867716780271586538%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163886867716780271586538&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81015302.first_rank_v2_pc_rank_v29&amp;utm_term=zookeeper&amp;spm=1018.2226.3001.4187</a></p><p>2、<a href="https://blog.csdn.net/qq_41819988/article/details/109606328?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E7%8B%82%E7%A5%9E%E8%AF%B4zookeep%20%E7%AC%94%E8%AE%B0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-109606328.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_41819988/article/details/109606328?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E7%8B%82%E7%A5%9E%E8%AF%B4zookeep%20%E7%AC%94%E8%AE%B0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-109606328.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式入门</title>
      <link href="/2021/12/04/fen-bu-shi-ru-men/"/>
      <url>/2021/12/04/fen-bu-shi-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="一、分布式理论"><a href="#一、分布式理论" class="headerlink" title="一、分布式理论"></a>一、分布式理论</h1><p><strong>什么是分布式系统？</strong></p><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是<strong>若干独立计算机的集合</strong>，这些计算机对于用户来说就像单个相关系统”</p><p>分布式系统是<strong>由一组过网络进行涌信、为了完成共同的任务而协调工作的计算机节点组成的系统</strong>。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。具目的是利用更多的机器处理更多的数据。</p><p>分布式系统(distributedsystem)是建立在网络之上的软件系统。</p><p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。</p><h1 id="二、RPC框架"><a href="#二、RPC框架" class="headerlink" title="二、RPC框架"></a>二、RPC框架</h1><p><strong>什么是RPC？</strong></p><p>RPC（Remote Procedure Call）是指<strong>远程过程调用，是一种进程间涌信方式，他是一种技术的思想，而不是规范</strong>。它允许程序调用另一个地址空间〈通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数／方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p><p><strong>为什么要用RPC呢？</strong></p><p>就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数。</p><p><strong>图解RPC框架</strong></p><img src="/2021/12/04/fen-bu-shi-ru-men/1.png" class="" title="RPC基本原理"><img src="/2021/12/04/fen-bu-shi-ru-men/2.png" class="" title="RPC调用流程"><p><strong>可以发现RPC的两个核心模块为：通讯、序列化</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速搭建属于自己的专属博客~</title>
      <link href="/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/"/>
      <url>/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>​        </p><p>​        自己搭建此博客花了大概三天时间，前前后后也踩了不少坑。建站后思索着本站的第一篇文章该写什么，最后还是决定写一篇如何搭建个人博客的文章来开启自己的博文写作之旅！</p><h1 id="二、博客环境搭建"><a href="#二、博客环境搭建" class="headerlink" title="二、博客环境搭建"></a>二、博客环境搭建</h1><p>​        </p><p>​        Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。话不多说，直接开始 !</p><h2 id="1-下载-Git-与Node-js"><a href="#1-下载-Git-与Node-js" class="headerlink" title="1.下载 Git 与Node.js"></a>1.下载 Git 与Node.js</h2><p>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><h3 id="1-1-Node-js-的安装与配置"><a href="#1-1-Node-js-的安装与配置" class="headerlink" title="1.1 Node.js 的安装与配置"></a>1.1 Node.js 的安装与配置</h3><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png" alt="Node.js下载以及版本的选择"></p><ul><li>下载好与电脑系统对应的安装程序后，开始安装流程：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png" alt="img"></p><ul><li>将”I accept the terms in the License Agreement” 前面的复选框勾选，同意安装协议，再点击 Next，进行下一步操作；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png" alt="img"></p><ul><li>选择 Node.js 安装程序的安装位置，在这里我以”C:\Program Files\nodejs” 为例（建议安装在C盘，本身软件也不大），点击 Next，进入下一步操作；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png" alt="img"></p><ul><li>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击 Next，进入下一步操作；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png" alt="img"></p><ul><li>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，点击 Next，进入下一步；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png" alt="img"></p><ul><li>点击”Install”，等待 Node.js 安装完成；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png" alt="img"></p><ul><li>当看到下图所显示的情况，Node.js 就成功安装完毕。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png" alt="img"></p><ul><li>验证安装，并测试 Node.js 是否加入环境变量，当出现如下图的情况，Node.js 安装大功告成。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png" alt="img"></p><p><strong>注意： 如果执行 node -v 报错的话，那么手动将 Node.js 的安装路径添加到环境变量中,具体步骤移步CSDN</strong>。</p><h3 id="1-2-Git-的安装与配置"><a href="#1-2-Git-的安装与配置" class="headerlink" title="1.2 Git 的安装与配置"></a>1.2 Git 的安装与配置</h3><ul><li><p>首先就是去 Git 官网下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><strong>点击Downloads    -&gt;    根据你的系统选择Mac os / Windows / Linux    -&gt;    开始下载</strong></p></li><li><p>接着无脑下一步，直到出现以下安装步骤：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png" alt="img"></p><p>安装Git 对环境变量 PATH 的影响，第一种影响较小，第三种会影响到 Windows 的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装；</p></li><li><p>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png" alt="img"></p></li><li><p>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png" alt="img"></p></li><li><p>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png" alt="img"></p></li><li><p>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png" alt="img"></p></li><li><p>安装完成</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png" alt="img"></p></li><li><p>回到桌面，点击鼠标右键，会出现两个选项 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>，在打开 Cmd (Win+R)，分别输入 <code>git</code> 和 <code>git --version</code>，如果出现如下图的情况，即安装成功！</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png" alt="img"></p></li></ul><h2 id="2-GitHub-账号的创建以及-Git-的配置"><a href="#2-GitHub-账号的创建以及-Git-的配置" class="headerlink" title="2. GitHub 账号的创建以及 Git 的配置"></a>2. GitHub 账号的创建以及 Git 的配置</h2><h3 id="2-1-GitHub-账号的创建"><a href="#2-1-GitHub-账号的创建" class="headerlink" title="2.1 GitHub 账号的创建"></a>2.1 GitHub 账号的创建</h3><p>​    GitHub 账号的创建比较简单，网上也有许多教程，此处便不再赘述</p><h3 id="2-2-Git-的配置"><a href="#2-2-Git-的配置" class="headerlink" title="2.2 Git 的配置"></a>2.2 Git 的配置</h3><ul><li><p><strong>配置Git 用户名和邮箱</strong></p><p>在桌面点击鼠标右键，点击 Git Bash Here，会出现一个界面如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117215118.png" alt="img"></p><p>然后分别输入下面的两个命令，并回车：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"# 一般只要不报错，可以跳过下面寻找.gitconfig文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>​        然后找到<code>.gitconfig</code> 文件，文件存放位置在 <code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><p>​        <img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117220016.png" alt="img"></p><ul><li><p><strong>配置GitHub</strong> </p><p><strong>创建：</strong></p><ul><li><p>新建一个名为你的用户名.github.io的仓库</p></li><li><p>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 </p></li></ul><p><strong>注意：</strong></p><ul><li><p>注册的邮箱一定要验证，否则不会成功；</p></li><li><p>仓库名字必须是：username.github.io，其中username是你的用户名；</p></li><li><p>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；</p></li><li><p>创建页面如下：</p></li></ul><img src="/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/1.jpg" class="" title="在github上创建仓库"></li><li><p><strong>配置SSH 免密登录</strong></p><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 </p><p><strong>简单的来说就是给予你当前电脑访问你GitHub 仓库的权限 ~</strong></p><p><strong>操作步骤</strong></p></li></ul><ol><li><p>在 git bash here  中创建一个ssh密钥</p><p>​    指令：<code>cd ~/.ssh</code></p><p>如果本地有的话，它会自动进入到了ssh目录下；</p><p>​    若没有则创建：    <code>ssh-keygen -t rsa -C "邮箱"</code>   此处邮箱填写自己的邮箱</p><p>然后enter三连</p><p>生成两个文件： id_rsa      id_rsa.pub  存放在 C:\Users\admin.ssh    文件夹下</p><p><strong>注意：pub文件放置的，就是我们的公开的ssh码，也是给管理员这个ssh，让他来添加</strong></p></li><li><p>在GitHub 或者 Gitee 上添加 SSH key</p><p>Title：随意填写</p><p>Key：将本地的id_rsa.pub文件用记事本打开，复制全部内容粘贴到GitHub 仓库的SSH Keys 位置</p><p>如下图所示：</p><img src="/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/2.jpg" class="" title="添加密钥到github"></li></ol><p>  <strong>至此，你的全部环境均以搭建好，接下来让我们快速开始搭建博客吧 ~</strong></p><h1 id="三、本地安装-Hexo-博客框架并推送到-GitHub"><a href="#三、本地安装-Hexo-博客框架并推送到-GitHub" class="headerlink" title="三、本地安装 Hexo 博客框架并推送到 GitHub"></a>三、本地安装 Hexo 博客框架并推送到 GitHub</h1><h2 id="3-1-博客初始化"><a href="#3-1-博客初始化" class="headerlink" title="3.1 博客初始化"></a>3.1 博客初始化</h2><ol><li><p>命令行安装cnpm  （加速以后的插件下载，建议git bash here 处安装）</p><p>命令：<code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code> </p><p>安装后验证：<code>cnpm -v</code>  出现版本号说明安装成功</p></li><li><p>命令行安装hexo  （安装博客框架）</p><p>命令：<code>cnpm install -g hexo-cli</code></p><p>安装后验证：<code>hexo  -v</code>  出现版本号说明安装成功</p></li><li><p>在电脑的某个地方新建一个名为HexoData的文件夹（名字可以随便取），比如我的是D:\JAVA项目\HexoData</p><p>这个文件夹将来就作为你存放代码的地方，所以最好不要随便放 </p></li><li><p>在D:\JAVA项目\HexoData 文件夹下右键打开 Git Bash </p><p>并依次执行以下命令</p><p><code>hexo init</code>         初始化命令，hexo会自动下载一些文件到这个目录，包括node_modules等</p><p><code>hexo g</code>                生成命令   </p><p><code>hexo s</code>                启动服务</p><p><strong>说明：</strong><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，说明博客初始化以及成功！</p><p>很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，</p><p>因为4000这个端口太常见了， 只需要关闭4000端口并重新启动即可</p><p><strong>到此博客的初始化便完成了，此时你可以本地开启服务并访问，下一步便是推送到GitHub 上！</strong></p></li></ol><h2 id="3-2-将博客部署到-github-个人主页上"><a href="#3-2-将博客部署到-github-个人主页上" class="headerlink" title="3.2 将博客部署到 github 个人主页上"></a>3.2 将博客部署到 github 个人主页上</h2><ul><li><p>第一步：在D:\JAVA项目\HexoData目录下安装 hexo-deployer-git 插件 （git bash here 处安装）</p><p>命令：<code>npm install hexo-deployer-git --save</code>   </p><p>说明：必须安装，否则执行hexo d 的话会报错</p></li><li><p>第二步：编辑D:\JAVA项目\HexoData目录下的 _config.yml 文件, 在文件末尾修改配置文件：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: github上对应仓库的ssh 链接      //也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git              branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong>仓库的ssh链接如下</p><img src="/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/3.jpg" class="" title="SSH链接"><p><strong>切记：分支branch切记修改为 main，之前github的默认主分支为master，现已经改为main</strong> ！！！</p></li><li><p>第三步：在D:\JAVA项目\HexoData目录下, 将本地 blog 推送到 github仓库</p><p>输入命令：<code>hexo d</code></p><p>也可能需要输入 username &amp; pwd</p><p>推送成功后, 在浏览器中输入对应域名, 即可访问  <a href="https://motherkillermaker.github.io/">https://motherkillermaker.github.io/</a> </p><p><strong>至此，你便初步搭建好了一个属于自己的博客！（本地服务不用启动依然可以访问）</strong></p><p><strong>下一步便是进行博客的美化 ~</strong></p><p><strong>此处附加上 hexo 框架常用的指令：</strong></p><table><thead><tr><th align="left">指令</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>hexo clean &amp;&amp; hexo g</code></td><td>清除本地项目并重新生成 （重新部署时使用）</td></tr><tr><td align="left"><code>hexo g</code></td><td>重新生成</td></tr><tr><td align="left"><code>Hexo s</code></td><td>开启本地预览</td></tr><tr><td align="left"><code>Hexo d</code></td><td>推送到github</td></tr></tbody></table></li></ul><h1 id="四、hexo-博客的主题安装以及个性化修改"><a href="#四、hexo-博客的主题安装以及个性化修改" class="headerlink" title="四、hexo 博客的主题安装以及个性化修改"></a>四、hexo 博客的主题安装以及个性化修改</h1><h2 id="4-1-主题下载与安装"><a href="#4-1-主题下载与安装" class="headerlink" title="4.1 主题下载与安装"></a>4.1 主题下载与安装</h2><p>​        点击 <a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载（推荐）：</p><p>​        直接在D:\JAVA项目\HexoData\themes目录下执行下面的命令（git bash here 处）：</p><p>​            <code>git clone git@github.com:blinkfox/hexo-theme-matery.git</code>  下载完成后便可看到对应的主题文件</p><p>​            </p><h2 id="4-2-主题的配置与使用"><a href="#4-2-主题的配置与使用" class="headerlink" title="4.2 主题的配置与使用"></a>4.2 主题的配置与使用</h2><h3 id="4-2-1-切换主题"><a href="#4-2-1-切换主题" class="headerlink" title="4.2.1 切换主题"></a>4.2.1 切换主题</h3><p><strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件。</p><p>站点配置文件就是根目录下的配置文件，比如我的博客文件在 <code>D:\JAVA项目\HexoData</code> 下，那么站点配置文件就是 <code>D:\JAVA项目\HexoData_config.yml</code>，</p><p>主题配置文件就是 <code>D:\JAVA项目\HexoData\hexo-theme-matery\_config.yml</code>。</p><p>另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。    </p><p>​    </p><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>hexo-theme-matery</code>，那么值就修改为 <code>theme: hexo-theme-matery</code></p><p>一些站点配置文件的其他地方的修改：</p><ul><li>语言选择：如果为中文用户，则在 <code>language:</code> 后添加值 <code>zh-CN</code>，如果不修改，默认为英语；</li><li>网址修改：<code>url:</code> 的值为你的网址名，如 <code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可;</li><li>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</li></ul><h3 id="4-2-2-创建标签页面-（首页的标签选项）"><a href="#4-2-2-创建标签页面-（首页的标签选项）" class="headerlink" title="4.2.2 创建标签页面 （首页的标签选项）"></a>4.2.2 创建标签页面 （首页的标签选项）</h3><ul><li><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下（source目录下 右键 git bash here）：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page "tags"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page "categories"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo new page "about"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo new page "contact"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p><h3 id="4-2-3-添加emoji表情支持"><a href="#4-2-3-添加emoji表情支持" class="headerlink" title="4.2.3 添加emoji表情支持"></a>4.2.3 添加emoji表情支持</h3><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">ithubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用 <code>emoji</code> 语法写的表情了。</p><h3 id="4-2-4-代码高亮"><a href="#4-2-4-代码高亮" class="headerlink" title="4.2.4 代码高亮"></a>4.2.4 代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-5-开启主页搜索功能"><a href="#4-2-5-开启主页搜索功能" class="headerlink" title="4.2.5 开启主页搜索功能"></a>4.2.5 开启主页搜索功能</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-6-开启中文链接转拼音功能"><a href="#4-2-6-开启中文链接转拼音功能" class="headerlink" title="4.2.6 开启中文链接转拼音功能"></a>4.2.6 开启中文链接转拼音功能</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: '-' # default: '-'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p><h3 id="4-2-7-开启文章字数统计插件"><a href="#4-2-7-开启文章字数统计插件" class="headerlink" title="4.2.7 开启文章字数统计插件"></a>4.2.7 开启文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-8-修改页脚"><a href="#4-2-8-修改页脚" class="headerlink" title="4.2.8 修改页脚"></a>4.2.8 修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="4-2-9-新增和修改社交链接"><a href="#4-2-9-新增和修改社交链接" class="headerlink" title="4.2.9 新增和修改社交链接"></a>4.2.9 新增和修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><p>新增我的CSDN链接</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.csdn) { %&gt;    &lt;a href="&lt;%= theme.socialLink.csdn %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-csdn"&gt;CSDN&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着你需要在主题配置文件下新增CSDN链接</p><pre class="line-numbers language-none"><code class="language-none">socialLink:  qq: 624597867  weixin: https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/wechat.png  github:   email:   facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  weibo: # https://weibo.com/xxx  csdn: https://blog.csdn.net/victoryxa  # 新增CSDN链接 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-10-添加评论系统"><a href="#4-2-10-添加评论系统" class="headerlink" title="4.2.10 添加评论系统"></a>4.2.10 添加评论系统</h3><p>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：</p><ul><li><p>City 版：是一款适合所有人使用的免费版本；</p></li><li><p>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115142313.png" alt="img"></p><p>注册完之后，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/image-20200115142709585.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none"># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>然后在<strong>主题配置文件</strong>相关的部署命令，然后查看效果即可。</p><h2 id="4-3-自定义修改"><a href="#4-3-自定义修改" class="headerlink" title="4.3 自定义修改"></a>4.3 自定义修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="4-3-1-修改主题颜色"><a href="#4-3-1-修改主题颜色" class="headerlink" title="4.3.1 修改主题颜色"></a>4.3.1 修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Tips：建议使用第三方工具（如IDE）打开css文件，使用查找功能（ctrl + f）来快速定位</strong></p><h3 id="4-3-2-修改banner图和文章特色图"><a href="#4-3-2-修改banner图和文章特色图" class="headerlink" title="4.3.2 修改banner图和文章特色图"></a>4.3.2 修改banner图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明： banner图即为你博客主页所显示的图片 （默认为 <code>0.jpg</code> ）</p><h3 id="4-3-3-修改网站上的相关信息"><a href="#4-3-3-修改网站上的相关信息" class="headerlink" title="4.3.3 修改网站上的相关信息"></a>4.3.3 修改网站上的相关信息</h3><p>首先看图：</p><p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115115221.png" alt="img"></p><p>相关配置信息如下：</p><pre class="line-numbers language-none"><code class="language-none">#这是根目录下的配置文件信息title: 过客~励む   #这是网站标题subtitle: 励む     #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description: 专注于Web,分享生活,分享知识  #网站描述keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]   #网站的关键词author: YangAir    #作者，文章版权所显示的language: zh-CN     #网站语言，不填写，默认为英文timezone:      #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/favicon.pnglogo: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:   enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 志之所向，金石为开，谁能御之？  sub2: 花开不是为了花落，而是为了开的更加灿烂。  sub3: 没有伞的孩子必须努力奔跑！  sub4: 欲望以提升热忱，毅力以磨平高山。  sub5: 如果放弃太早，你永远都不知道自己会错过什么。  sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>网站打字效果副标题默认有两个，即 <code>sub1</code> 和 <code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 <code>sub1</code> 和 <code>sub2</code> 后面继续添加即可，然后在去主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>bg-cover-content.ejs</code> 文件，大约在 12 行左右，如下面所示：</p><pre class="line-numbers language-none"><code class="language-none"> &lt;div class="description center-align"&gt;     &lt;% if (theme.subtitle.enable) { %&gt;         &lt;span id="subtitle"&gt;&lt;/span&gt;         &lt;script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11"&gt;&lt;/script&gt;        &lt;script&gt;            var typed = new Typed("#subtitle", {                strings: ['&lt;%= theme.subtitle.sub1 %&gt;',                          '&lt;%= theme.subtitle.sub2 %&gt;',                          '&lt;%= theme.subtitle.sub3 %&gt;',                          '&lt;%= theme.subtitle.sub4 %&gt;',                          '&lt;%= theme.subtitle.sub5 %&gt;',                          '&lt;%= theme.subtitle.sub6 %&gt;'],                 startDelay: &lt;%= theme.subtitle.startDelay %&gt;,                 typeSpeed: &lt;%= theme.subtitle.typeSpeed %&gt;,                 loop: &lt;%= theme.subtitle.loop %&gt;,                    backSpeed: &lt;%= theme.subtitle.backSpeed %&gt;,                 showCursor: &lt;%= theme.subtitle.showCursor %&gt;              });          &lt;/script&gt;      &lt;% } else { %&gt;            &lt;%= config.description %&gt;      &lt;% } %&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-4-在关于我页面添加个人简历"><a href="#4-3-4-在关于我页面添加个人简历" class="headerlink" title="4.3.4 在关于我页面添加个人简历"></a>4.3.4 在关于我页面添加个人简历</h3><p>打开 <code>theme/matery/layout/about.ejs</code> 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="card"&gt;     &lt;div class="card-content"&gt;         &lt;div class="card-content article-card-content"&gt;             &lt;div class="title center-align" data-aos="zoom-in-up"&gt;                 &lt;i class="fa fa-address-book"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('个人简历') %&gt;              &lt;/div&gt;                 &lt;div id="articleContent" data-aos="fade-up"&gt;                     &lt;%- page.content %&gt;                 &lt;/div&gt;           &lt;/div&gt;      &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个 card，然后 <code>/source/about/index.md</code> 下面写上你的简历了（就像写博客一样）。</p><h1 id="五、博客的编写以及推送"><a href="#五、博客的编写以及推送" class="headerlink" title="五、博客的编写以及推送"></a>五、博客的编写以及推送</h1><ul><li>第一步：创建<code>.md</code>文件</li></ul><p> 方法1：定位到我们的hexo根目录，Git Bash Here 中执行命令：  </p><p><code>hexo new 'my-first-blog'</code>    其中引号内为文章名称         </p><p>hexo会帮我们在<code>D:\JAVA项目\HexoData\source\_posts</code> 下生成相关.md文件，用这个命令的好处是帮我们自动生成了时间，方法1默认生成如下内容：</p><pre class="line-numbers language-none"><code class="language-none">title: my-first-blotdate: 2021-11-29 18:21:30tags:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法2：当然你也可以直接自己打开<code>D:\JAVA项目\HexoData\source\_posts</code> 目录新建<code>.md</code>文件 </p><ul><li><p>第二步：编写并保存 </p><p>我们只需要用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可 </p></li><li><p>第三步：清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ghexo d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>补充：<code>hexo new page 'postName'</code>命令和<code>hexo new 'postName'</code>的区别？</strong> </p></li></ul><p>​    <code>hexo new page 'My-second-blog'</code>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>​        搭建该博客花了大概三天时间，写自己的第一篇博文也花了一天时间。希望此博文对各位看官有小小的帮助，今后还会继续更新自己的学习笔记，希望大家多多关注~</p><p>​        后会有期 ~</p><p><strong>参考文献：</strong></p><ol><li><a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></li><li><a href="https://www.bilibili.com/read/cv12633102">https://www.bilibili.com/read/cv12633102</a></li><li>theme-matery 主题官方使用说明 <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇博文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
